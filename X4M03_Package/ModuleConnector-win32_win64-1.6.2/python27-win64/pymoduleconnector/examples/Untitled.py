{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting playback for C:\\Users\\Ubicomp_Lab\\AppData\\Roaming\\jupyter\\runtime\\kernel-2b26c4fc-f31e-49b3-ba1a-e6f4fa68253b.json\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "failed to open recordingC:\\Users\\Ubicomp_Lab\\AppData\\Roaming\\jupyter\\runtime\\kernel-2b26c4fc-f31e-49b3-ba1a-e6f4fa68253b.json",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-965f0556dde2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    212\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    213\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"__main__\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 214\u001b[1;33m    \u001b[0mmain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m<ipython-input-1-965f0556dde2>\u001b[0m in \u001b[0;36mmain\u001b[1;34m()\u001b[0m\n\u001b[0;32m    204\u001b[0m         \u001b[1;32mif\u001b[0m  \u001b[0moptions\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmeta_filename\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m             playback_recording(options.meta_filename,\n\u001b[1;32m--> 206\u001b[1;33m                     baseband=options.baseband)\n\u001b[0m\u001b[0;32m    207\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    208\u001b[0m             \u001b[0mparser\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merror\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Missing -d or -f. See --help.\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-1-965f0556dde2>\u001b[0m in \u001b[0;36mplayback_recording\u001b[1;34m(meta_filename, baseband)\u001b[0m\n\u001b[0;32m    134\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mplayback_recording\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmeta_filename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbaseband\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    135\u001b[0m     \u001b[1;32mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Starting playback for {}\"\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmeta_filename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 136\u001b[1;33m     \u001b[0mplayer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpymoduleconnector\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataPlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmeta_filename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    137\u001b[0m     \u001b[0mdur\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mplayer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_duration\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    138\u001b[0m     \u001b[0mmc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpymoduleconnector\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mModuleConnector\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mplayer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\Ubicomp_Lab\\Anaconda2\\lib\\site-packages\\pymoduleconnector-1.6.2-py2.7.egg\\pymoduleconnector\\moduleconnectorwrapper\\__init__.pyc\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, meta_filename, depth)\u001b[0m\n\u001b[0;32m  10938\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10939\u001b[0m         \"\"\"\n\u001b[1;32m> 10940\u001b[1;33m         \u001b[0mthis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_moduleconnectorwrapper\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnew_PyDataPlayer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmeta_filename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdepth\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m  10941\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m  10942\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mthis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mRuntimeError\u001b[0m: failed to open recordingC:\\Users\\Ubicomp_Lab\\AppData\\Roaming\\jupyter\\runtime\\kernel-2b26c4fc-f31e-49b3-ba1a-e6f4fa68253b.json"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "\"\"\" \\example XEP_X4M200_X4M300_plot_record_playback_radar_raw_data.py\n",
    "\n",
    "#Target module: X4M200,X4M300,X4M03\n",
    "\n",
    "#Introduction: XeThru modules support both RF and baseband data output. This is an example of radar raw data manipulation. \n",
    "               Developer can use Module Connecter API to read, record radar raw data, and also playback recorded data. \n",
    "\t\t\t   \n",
    "#Command to run: \"python XEP_X4M200_X4M300_plot_record_playback_radar_raw_data.py -d com8\" or \"python3 X4M300_printout_presence_state.py -d com8\"\n",
    "                 change \"com8\" with your device name, using \"--help\" to see other options.\n",
    "                 Using TCP server address as device name is also supported, e.g. \n",
    "                 \"python X4M200_sleep_record.py -d tcp://192.168.1.169:3000\".\n",
    "\"\"\"\n",
    "\n",
    "from __future__ import print_function, division\n",
    "\n",
    "import sys\n",
    "from optparse import OptionParser\n",
    "from time import sleep\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.animation import FuncAnimation\n",
    "\n",
    "import pymoduleconnector\n",
    "from pymoduleconnector import DataType\n",
    "import csv\n",
    "\n",
    "__version__ = 3\n",
    "\n",
    "def reset(device_name):\n",
    "    mc = pymoduleconnector.ModuleConnector(device_name)\n",
    "    xep = mc.get_xep()\n",
    "    xep.module_reset()\n",
    "    mc.close()\n",
    "    sleep(3)\n",
    "\n",
    "def on_file_available(data_type, filename):\n",
    "    print(\"new file available for data type: {}\".format(data_type))\n",
    "    print(\"  |- file: {}\".format(filename))\n",
    "    if data_type == DataType.FloatDataType:\n",
    "        print(\"processing Float data from file\")\n",
    "\n",
    "def on_meta_file_available(session_id, meta_filename):\n",
    "    print(\"new meta file available for recording with id: {}\".format(session_id))\n",
    "    print(\"  |- file: {}\".format(meta_filename))\n",
    "\n",
    "def clear_buffer(mc):\n",
    "    \"\"\"Clears the frame buffer\"\"\"\n",
    "    xep = mc.get_xep()\n",
    "    while xep.peek_message_data_float():\n",
    "        xep.read_message_data_float()\n",
    "\n",
    "def simple_xep_plot(device_name, record=False, baseband=False):\n",
    "    FPS = 10\n",
    "    directory = '.'\n",
    "    reset(device_name)\n",
    "    mc = pymoduleconnector.ModuleConnector(device_name)\n",
    "\n",
    "    # Assume an X4M300/X4M200 module and try to enter XEP mode\n",
    "    app = mc.get_x4m300()\n",
    "    # Stop running application and set module in manual mode.\n",
    "    try:\n",
    "        app.set_sensor_mode(0x13, 0) # Make sure no profile is running.\n",
    "    except RuntimeError:\n",
    "        # Profile not running, OK\n",
    "        pass\n",
    "\n",
    "    try:\n",
    "        app.set_sensor_mode(0x12, 0) # Manual mode.\n",
    "    except RuntimeError:\n",
    "        # Maybe running XEP firmware only?\n",
    "        pass\n",
    "\n",
    "    if record:\n",
    "        outfile = open ( 'Float_recording.csv', 'wb')\n",
    "        recorder = mc.get_data_recorder()\n",
    "        recorder.subscribe_to_file_available(pymoduleconnector.AllDataTypes, on_file_available )\n",
    "        recorder.subscribe_to_meta_file_available(on_meta_file_available)\n",
    "\n",
    "    xep = mc.get_xep()\n",
    "    # Set DAC range\n",
    "    xep.x4driver_set_dac_min(900)\n",
    "    xep.x4driver_set_dac_max(1150)\n",
    "\n",
    "    # Set integration\n",
    "    xep.x4driver_set_iterations(16)\n",
    "    xep.x4driver_set_pulses_per_step(26)\n",
    "\n",
    "    xep.x4driver_set_downconversion(int(baseband))\n",
    "    # Start streaming of data\n",
    "    xep.x4driver_set_fps(FPS)\n",
    "\n",
    "    def read_frame():\n",
    "        \"\"\"Gets frame data from module\"\"\"\n",
    "        d = xep.read_message_data_float()\n",
    "        frame = np.array(d.data)\n",
    "         # Convert the resulting frame to a complex array if downconversion is enabled\n",
    "        if baseband:\n",
    "            n = len(frame)\n",
    "            frame = frame[:n//2] + 1j*frame[n//2:]\n",
    "        return frame\n",
    "\n",
    "    def animate(i):\n",
    "        if baseband:\n",
    "            line.set_ydata(abs(read_frame())) # update the data\n",
    "        else:\n",
    "            line.set_ydata(read_frame())\n",
    "        return line,\n",
    "\n",
    "    fig = plt.figure()\n",
    "    fig.suptitle(\"example version %d \"%(__version__))\n",
    "    ax = fig.add_subplot(1,1,1)\n",
    "    ax.set_ylim(0 if baseband else -0.03,0.03) #keep graph in frame (FIT TO YOUR DATA)\n",
    "    frame = read_frame()\n",
    "    if baseband:\n",
    "        frame = abs(frame)\n",
    "    line, = ax.plot(frame)\n",
    "\n",
    "    clear_buffer(mc)\n",
    "\n",
    "    if record:\n",
    "        outfile.write (repr (frame))\n",
    "        outfile.write ( '\\ n')\n",
    "        recorder.start_recording(DataType.BasebandApDataType | DataType.FloatDataType, directory)\n",
    "\n",
    "    ani = FuncAnimation(fig, animate, interval=FPS)\n",
    "    try:\n",
    "        plt.show()\n",
    "    finally:\n",
    "        # Stop streaming of data\n",
    "        xep.x4driver_set_fps(0)\n",
    "\n",
    "def playback_recording(meta_filename, baseband=False):\n",
    "    print(\"Starting playback for {}\" .format(meta_filename))\n",
    "    player = pymoduleconnector.DataPlayer(meta_filename, -1)\n",
    "    dur = player.get_duration()\n",
    "    mc = pymoduleconnector.ModuleConnector(player)\n",
    "    xep = mc.get_xep()\n",
    "    player.set_playback_rate(1.0)\n",
    "    player.set_loop_mode_enabled(True)\n",
    "    player.play()\n",
    "\n",
    "    print(\"Duration(ms): {}\".format(dur))\n",
    "\n",
    "    def read_frame():\n",
    "        \"\"\"Gets frame data from module\"\"\"\n",
    "        d = xep.read_message_data_float()\n",
    "        frame = np.array(d.data)\n",
    "        if baseband:\n",
    "            n = len(frame)\n",
    "            frame = frame[:n//2] + 1j*frame[n//2:]\n",
    "        return frame\n",
    "\n",
    "    def animate(i):\n",
    "        if baseband:\n",
    "            line.set_ydata(abs(read_frame()))  # update the data\n",
    "        else:\n",
    "            line.set_ydata(read_frame())\n",
    "        return line,\n",
    "\n",
    "    fig = plt.figure()\n",
    "    fig.suptitle(\"Plot playback\")\n",
    "    ax = fig.add_subplot(1,1,1)\n",
    "    frame = read_frame()\n",
    "    line, = ax.plot(frame)\n",
    "    ax.set_ylim(0 if baseband else -0.03,0.03) #keep graph in frame (FIT TO YOUR DATA)\n",
    "    ani = FuncAnimation(fig, animate, interval=10)\n",
    "    plt.show()\n",
    "\n",
    "    player.stop()\n",
    "\n",
    "def main():\n",
    "    parser = OptionParser()\n",
    "    parser.add_option(\n",
    "        \"-d\",\n",
    "        \"--device\",\n",
    "        dest=\"device_name\",\n",
    "        help=\"device file to use\",\n",
    "        metavar=\"FILE\")\n",
    "    parser.add_option(\n",
    "        \"-b\",\n",
    "        \"--baseband\",\n",
    "        action=\"store_true\",\n",
    "        default=False,\n",
    "        dest=\"baseband\",\n",
    "        help=\"Enable baseband, rf data is default\")\n",
    "    parser.add_option(\n",
    "        \"-r\",\n",
    "        \"--record\",\n",
    "        action=\"store_true\",\n",
    "        default=False,\n",
    "        dest=\"record\",\n",
    "        help=\"Enable recording\")\n",
    "    parser.add_option(\n",
    "        \"-f\",\n",
    "        \"--file\",\n",
    "        dest=\"meta_filename\",\n",
    "        metavar=\"FILE\",\n",
    "        help=\"meta file from recording\")\n",
    "\n",
    "    (options, args) = parser.parse_args()\n",
    "    if not options.device_name:\n",
    "        if  options.meta_filename:\n",
    "            playback_recording(options.meta_filename,\n",
    "                    baseband=options.baseband)\n",
    "        else:\n",
    "            parser.error(\"Missing -d or -f. See --help.\")\n",
    "    else:\n",
    "        simple_xep_plot(options.device_name, record=options.record,\n",
    "                baseband=options.baseband)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "   main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
